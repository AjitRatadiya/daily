from concurrent.future import ThreadPoolExecuter,ProcessPoolExecuter

ThreadPoolExecuter- for i/o Bound tasks
ProcessPoolExecuter - for CPU Bound tasks

obj = ThreadPoolExecuter(max_wrkers=num of threads to use)
with ThreadPoolExecuter(max_wrkers=num of threads to use) as th:

m1 = obj.submit(fun, *args, *kwargs)
m1 = obj.map(fun, *iterables, chunksize=1)
m1 = obj.shutdown()

m1.cancle()- it will cancle the call ,If the call is currently being executed or finished running and cannot
	 be cancelled then the method will return False, otherwise the call will be cancelled and the method will return True.

m1.cancelled()-Return True if the call was successfully cancelled.

m1.running() - Return True if the call is currently being executed and cannot be cancelled.

m1.done() - Return True if the call was successfully cancelled or finished running.

m1.result(timeout=None):
	Return the value returned by the call. If the call hasn’t yet completed then this method will wait up to timeout seconds. 
	If the call hasn’t completed in timeout seconds, then a concurrent.futures.TimeoutError will be raised. 
	timeout can be an int or float. If timeout is not specified or None, there is no limit to the wait time.
	If the future is cancelled before completing then CancelledError will be raised.
	If the call raised an exception, this method will raise the same exception.

m1.exception(timeout=None)
	Return the exception raised by the call.
	If the call hasn’t yet completed then this method will wait up to timeout seconds. 
	If the call hasn’t completed in timeout seconds, then a concurrent.futures.TimeoutError will be raised. 
	timeout can be an int or float. If timeout is not specified or None, there is no limit to the wait time.
	If the future is cancelled before completing then CancelledError will be raised.
	If the call completed without raising, None is returned.