# need code changes

# class Downloader:
#
#     def __init__(self):
#         self.downloaded = False
#         self.download_data = True
#         self.thread = None
#
#     def download(self, url, dest):
#         _continue = True
#         request.urlretrieve(url, dest, DownloadProgressBar(self).Handle_Progress)
#         handler = request.urlopen(url)
#         fp = open(dest, "wb")
#         while self.download_data and _continue:
#             data = handler.read()
#             fp.write(data)
#             _continue = data
#         handler.close()
#         fp.close()
#         return self.downloaded
#
#     def cancel(self):
#         print('called')
#         self.download_data = False
#         _continue = False


class DownloadProgressBar(QWidget):

    def __init__(self):
        super(DownloadProgressBar, self).__init__()
        self.setWindowFlag(Qt.FramelessWindowHint)
        width, height = pyautogui.size()
        self.setGeometry((width / 2) - 150, (height / 2) - 75, (width - 1100), (height - 650))
        label = QLabel("Downloading:", self)
        label.setGeometry(25, 20, 100, 30)
        self.progressBar = QProgressBar(self)
        self.progressBar.setGeometry(25, 45, 210, 30)
        self.show()

    # def closeEvent(self, event):
    #     print("in close")
    #     answer = QMessageBox.question(
    #         self,
    #         'Are you sure you want to quit ?',
    #         'Task is in progress !',
    #         QMessageBox.Yes,
    #         QMessageBox.No)
    #     if answer == QMessageBox.Yes:
    #         print("in yes")
    #         self._obj.downloaded = False
    #         self._obj.cancel()
    #         event.accept()
    #     else:
    #         event.ignore()

    def Handle_Progress(self, blocknum, blocksize, totalsize):
        readed_data = blocknum * blocksize
        if totalsize > 0:
            download_percentage = readed_data * 100 / totalsize
            self.progressBar.setValue(int(download_percentage))
            QApplication.processEvents()
        if blocknum * blocksize > totalsize:
            self.close()
